#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h>
#include <semaphore.h>

#define maxCapacidadFilas 15
#define maxCapacidadMesa 30

sem_t sem_mesa, sem_emp, sem_pol, sem_usu;
sem_t sem_empleado1, sem_empleado2, sem_empleado3;
pthread_t hilosPoliticos[20], hilosEmpresas[20], hilosUsuarios[20];

void *politicos();
void *empresas();
void *usuarios();

int main(){
    // Inicializaci칩n de sem치foros
    sem_init(&sem_mesa, 0, maxCapacidadMesa);
    sem_init(&sem_emp, 0, maxCapacidadFilas);
    sem_init(&sem_pol, 0, maxCapacidadFilas);
    sem_init(&sem_usu, 0, maxCapacidadFilas);
    sem_init(&sem_empleado1, 0, 1);
    sem_init(&sem_empleado2, 0, 1);
    sem_init(&sem_empleado3, 0, 1);

    // Creacion de hilos
    for (int i = 0; i < 5; i++) {
        if(pthread_create(&hilosPoliticos[i], NULL, &politicos, NULL) != 0){
            printf("Error al crear el hilo.\n");
            return 1;
        }
    }

    for (int i = 0; i < 5; i++) {
        if(pthread_create(&hilosEmpresas[i], NULL, &empresas, NULL) != 0){
            printf("Error al crear el hilo.\n");
            return 1;
        }
    }
 
    for (int i = 0; i < 5; i++) {
        if(pthread_create(&hilosUsuarios[i], NULL, &usuarios, NULL) != 0){
            printf("Error al crear el hilo.\n");
            return 1;
        }
    }

    // Joins
    for (int i = 0; i < 5; i++) {
        if(pthread_join(hilosPoliticos[i],NULL) != 0){
            printf("Error al hacer join.\n");
            return 2;
        }
    }

    for (int i = 0; i < 5; i++) {
        if(pthread_join(hilosEmpresas[i], NULL) != 0){
            printf("Error al hacer join.\n");
            return 2;
        }
    }

    for (int i = 0; i < 5; i++) {
        if(pthread_join(hilosUsuarios[i], NULL) != 0){
            printf("Error al hacer join.\n");
            return 2;
        }
    }

    // Destruimos los semaforos
    sem_destroy(&sem_mesa);
    sem_destroy(&sem_emp);
    sem_destroy(&sem_pol);
    sem_destroy(&sem_usu);
    sem_destroy(&sem_empleado1);
    sem_destroy(&sem_empleado2);
    sem_destroy(&sem_empleado3);
    return 0;
}

void *politicos(){
    int atendido = 0;
    printf("Llego un politico al banco y quiere entrar.\n");
    if(sem_trywait(&sem_mesa) == 0){ // Hay lugar en la mesa
        printf("Ingresa un politico a la mesa de entrada.\n");
        sem_wait(&sem_pol); // Intenta entrar en su fila, sino espera
        sem_post(&sem_mesa); // Libera su lugar en la mesa
        while(atendido == 0){ // Mientras no haya sido atendido
            if(sem_trywait(&sem_empleado1) == 0){
                printf("Un politico esta siendo atendido.\n");
                sleep(2);
                sem_post(&sem_empleado1); // Libera al empleado.
                atendido = 1;
            } else {
                if (sem_trywait(&sem_empleado2) == 0) {
                    printf("Un politico esta siendo atendido.\n");
                    sleep(2);
                    sem_post(&sem_empleado2); // Libera al empleado.
                    atendido = 1;
                } else {
                    if (sem_trywait(&sem_empleado3) == 0) {
                        printf("Un politico esta siendo atendido.\n");
                        sleep(2);
                        sem_post(&sem_empleado3); // Libera al empleado.
                        atendido = 1;
                    }
                }
            }
        }
        printf("Un politico fue atendido y se retira.\n");
        sem_post(&sem_pol); // Libera su lugar en la fila.
    } else { // No hay lugar en la mesa
        printf("Cliente se retira porque la mesa de entrada est치 llena.\n");
    }
    exit(0);
}

void *empresas(){
    int atendido = 0;
    printf("Llego una empresa al banco y quiere entrar.\n");
    if(sem_trywait(&sem_mesa) == 0){ // Hay lugar en la mesa
        printf("Ingresa una empresa a la mesa de entrada.\n");
        sem_wait(&sem_emp); // Intenta entrar en su fila, sino espera
        sem_post(&sem_mesa); // Libera su lugar en la mesa
        while(atendido == 0){ // Mientras no haya sido atendido
            if(sem_trywait(&sem_empleado1) == 0){
                printf("Una empresa esta siendo atendida.\n");
                sleep(2);
                sem_post(&sem_empleado1); // Libera al empleado.
                atendido = 1;
            } else {
                if (sem_trywait(&sem_empleado2) == 0) {
                    printf("Una empresa esta siendo atendida.\n");
                    sleep(2);
                    sem_post(&sem_empleado2); // Libera al empleado.
                    atendido = 1;
                }
            }
        }  
        printf("Una empresa fue atendida y se retira.\n");
        sem_post(&sem_emp); // Libera su lugar en la fila.
    } else { // No hay lugar en la mesa
        printf("Cliente se retira porque la mesa de entrada est치 llena.\n");
    }
    exit(0);
}

void *usuarios(){

}